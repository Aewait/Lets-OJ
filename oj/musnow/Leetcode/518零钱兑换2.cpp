class Solution {
public:
    int change(int amount, vector<int>& coins) {
        // 给定的是硬币种类，也就是一个硬币可以用多次
        vector<int> dp(amount + 1, 0);
        // 我们需要计算的是有多少中方式可以凑齐amount，也就是装满背包
        // dp[0]是背包为0的时候，这种时候装满背包的方式是不装，只有一种
        dp[0] = 1;
        // 先遍历硬币
        for (int i = 0; i < coins.size(); i++) {
            for (int j = coins[i]; j <= amount; j++) {
                // 题目求的是装满背包的方法数量，1+2+2和2+1+2是一样的
                // 加等相当于沿用之前的方法数量  
                // 比如当前硬币是2，背包容量是5（硬币数组[1,2,5]）
                // 一共有三种方式，5 = 1+1+1+1+1 = 2+2+1 = 1+1+1+2
                // 其中第一种方式在遍历硬币1的时候得出
                // 后两种方式其实被拆为了与3有关，因为2+1和1+1+1是得到3的两种方式
                // 3 = j-coins[i] = 5-2
                // 我们让dp[j]保留了硬币1的操作方式，又加上了从3跳到5的方法。
                // 获得3的方法数量+硬币2（相当于一种方式），最终得到了三种方式。
                
                // 最终遍历硬币5，+=dp[0]，因为将硬币5装入容量为5的背包只有一种方式，dp[0]正好是1
                dp[j] += dp[j - coins[i]];
            }
        }
        return dp[amount];
    }
};

// https://leetcode.cn/problems/coin-change-ii/
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if (prices.size() == 0) {
            return 0;
        }
        vector<vector<int>> dp(prices.size(), vector<int>(5, 0));
        dp[0][1] = 0 - prices[0]; // 当天第一次买入
        dp[0][3] = 0 - prices[0]; // 当天第二次买入
        for (int i = 1; i < prices.size(); i++) {
            // 今天啥事不干
            dp[i][0] = dp[i - 1][0];
            // 今天继续持有股票（可能是新买入，也可能是沿用之前啥事不干+买入股票的状态）
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
            // 今天不持有股票（可能是本来就没有持有，也可以能是卖出了昨天买的股票）
            // 今天不持有前提是昨天买入过，所以是dp[i - 1][1]
            dp[i][2] = max(dp[i - 1][2], dp[i - 1][1] + prices[i]);
            // 今天第二次购入股票（可能是本来就持有了第二次的股票，也可能是今天再买一次股票）
            // 今天再买一次依赖于昨天卖出过了，所以是dp[i - 1][2]
            dp[i][3] = max(dp[i - 1][3], dp[i - 1][2] - prices[i]);
            // 今天不持有第二次的股票（可能是本来就不持有，也可能是把第二次购买的股票在今天卖掉）
            // 1.这里使用dp[i-1][4]其实也可以理解为是当前买入后又卖出了（余额没有变化）
            // 2.今天卖出依赖于昨天买入过第二次，所以是dp[i - 1][3]
            dp[i][4] = max(dp[i - 1][4], dp[i - 1][3] + prices[i]);
        }
        // 最终得到的获利值，一定是最后一天的第二次不持有是最多的
        // 因为买卖两次赚的钱肯定会比买卖一次多（亏钱还买啊？）
        return dp[prices.size() - 1][4];
    }
};
